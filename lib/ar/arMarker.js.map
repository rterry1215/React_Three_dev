{"version":3,"sources":["../../src/ar/arMarker.js"],"names":["ARMarker","children","type","barcodeValue","patternUrl","params","onMarkerFound","onMarkerLost","markerRoot","arToolkitContext","isFound","setIsFound","markerControls","ArMarkerControls","current","index","_arMarkersControls","indexOf","splice","visible"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OAQX;AAAA,MAPJC,QAOI,QAPJA,QAOI;AAAA,MANJC,IAMI,QANJA,IAMI;AAAA,MALJC,YAKI,QALJA,YAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,MAGI,QAHJA,MAGI;AAAA,MAFJC,aAEI,QAFJA,aAEI;AAAA,MADJC,YACI,QADJA,YACI;AACJ,MAAMC,UAAU,GAAG,oBAAnB;;AACA,eAA6B,gBAA7B;AAAA,MAAQC,gBAAR,UAAQA,gBAAR;;AACA,kBAA8B,qBAAS,KAAT,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,wBAAU,YAAM;AACd,QAAI,CAACF,gBAAL,EAAuB;AACrB;AACD;;AAED,QAAMG,cAAc,GAAG,IAAIC,0BAAJ,CAAqBJ,gBAArB,EAAuCD,UAAU,CAACM,OAAlD;AACrBZ,MAAAA,IAAI,EAAJA,IADqB;AAErBC,MAAAA,YAAY,EAAED,IAAI,KAAK,SAAT,GAAqBC,YAArB,GAAoC,IAF7B;AAGrBC,MAAAA,UAAU,EAAEF,IAAI,KAAK,SAAT,GAAqBE,UAArB,GAAkC;AAHzB,OAIlBC,MAJkB,EAAvB;AAOA,WAAO,YAAM;AACX,UAAMU,KAAK,GAAGN,gBAAgB,CAACO,kBAAjB,CAAoCC,OAApC,CAA4CL,cAA5C,CAAd;;AACAH,MAAAA,gBAAgB,CAACO,kBAAjB,CAAoCE,MAApC,CAA2CH,KAA3C,EAAkD,CAAlD;AACD,KAHD;AAID,GAhBD,EAgBG,EAhBH;AAkBA,uBAAS,YAAM;AACb,QAAIP,UAAU,CAACM,OAAX,CAAmBK,OAAnB,IAA8B,CAACT,OAAnC,EAA4C;AAC1CC,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAIL,aAAJ,EAAmB;AACjBA,QAAAA,aAAa;AACd;AACF,KALD,MAKO,IAAI,CAACE,UAAU,CAACM,OAAX,CAAmBK,OAApB,IAA+BT,OAAnC,EAA4C;AACjDC,MAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,UAAIJ,YAAJ,EAAkB;AAChBA,QAAAA,YAAY;AACb;AACF;AACF,GAZD;AAcA,sBAAO;AAAO,IAAA,GAAG,EAAEC;AAAZ,KAAyBP,QAAzB,CAAP;AACD,CA9CD;;eAgDeD,Q","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { ArMarkerControls } from \"@ar-js-org/ar.js/three.js/build/ar-threex\"\nimport { useFrame } from \"@react-three/fiber\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { useAR } from \"./ar\"\n\nconst ARMarker = ({\n  children,\n  type,\n  barcodeValue,\n  patternUrl,\n  params,\n  onMarkerFound,\n  onMarkerLost,\n}) => {\n  const markerRoot = useRef()\n  const { arToolkitContext } = useAR()\n  const [isFound, setIsFound] = useState(false)\n\n  useEffect(() => {\n    if (!arToolkitContext) {\n      return\n    }\n\n    const markerControls = new ArMarkerControls(arToolkitContext, markerRoot.current, {\n      type,\n      barcodeValue: type === \"barcode\" ? barcodeValue : null,\n      patternUrl: type === \"pattern\" ? patternUrl : null,\n      ...params,\n    })\n\n    return () => {\n      const index = arToolkitContext._arMarkersControls.indexOf(markerControls)\n      arToolkitContext._arMarkersControls.splice(index, 1)\n    }\n  }, [])\n\n  useFrame(() => {\n    if (markerRoot.current.visible && !isFound) {\n      setIsFound(true)\n      if (onMarkerFound) {\n        onMarkerFound()\n      }\n    } else if (!markerRoot.current.visible && isFound) {\n      setIsFound(false)\n      if (onMarkerLost) {\n        onMarkerLost()\n      }\n    }\n  })\n\n  return <group ref={markerRoot}>{children}</group>\n}\n\nexport default ARMarker\n"],"file":"arMarker.js"}